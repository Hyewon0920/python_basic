<자료구조>
1. 리스트
대괄호를 사용함
하나의 주제에 여러 값들이 있을 경우 이를 관리하기 편하게 하나로 묶음
튜플과 유사하나 얘는 변경가능, 삭제 가능
각 자료마다 인덱스넘버가 있으며 인덱스넘버는 좌측부터 0부터 시작
a = [1,2,3] #1은 인덱스넘버가 0, 2는 1, 3은 2

*리스트 함수
인덱스 넘버가 1번인 자료를 출력하고 싶다면? #print(a.index(1))
리스트를 수정하고 싶다면? #a.append(삽입하고싶은 것) 
 ㄴa.append(4) : 맨 마지막에 추가됨
원하는 위치에 삽입하고 싶으면 #a.insert(인덱스넘버, "삽입하고 싶은 내용")
  ㄴ인덱스 넘버가 1인 위치에 삽입됨
삭제 : a.pop() -> 맨 뒤부터 하나씩 없어짐
리스트 내의 중복값이 몇개 있는지 : a.count("찾고싶은 값")
정렬 : a.sort() #4,2,5 -> 2,4,5
뒤집기 : a.revere() : 값들 뒤집기 #5,4,3 -> 3,4,5로
전부 삭제 : a.clear()
합치기 : a.extend(b) #a에 b를 합침 + 도 가능 단, 순서 주의
zip, enumerate


name=['a','b']
value =[1,2]
for n,v in zip(name, value) :
    print(n,v)                  a 1  b 2

item = ['a','v','c']
for i in enumerate(item) :
    print(i)                    0 a  1 v  2 c


*특징
리스트는 문자열, 숫자열 혼용해서 값을 가질 수 있다




2. 사전
: 딕셔너리(사전)처럼 키값과 밸류값이 하나로 되어 있음
   ㄴkey1 : value1 
리스트는 대괄호, 사전은 중괄호
하나의 키값에 여러 밸류가 있을 수 있고 키는 중복이 안됨


cabinet = {3: "유재석", 100: "김태호"}

만약 키값으로 그 키값에 해당하는 밸류를 보고싶다면?
print(cabinet[3]) # 유재석 -> key 3 에 해당하는 value
print(cabinet.get(3)) # 유재석 -> key 3 에 해당하는 value

단, 대괄호는 범위에서 벗어난 키값을 찾고자 하면 에러 뜨고 종료됨
get은 종료는 안되고 none을 반환함 -> none을 반환하기 싫으면 default값 적어주기
  ㄴcabinet.get(3, "사용가능")

key는 문자열도 가능!
cabinet = {"A-3": "유재석", "B-100": "김태호"}
print(cabinet["A-3"]) # 유재석
print(cabinet["B-100"]) # 김태호

사전자료형에 값이 있는가?
print(3 in cabinet)  # True

사전 업데이트하기
print(cabinet) # {'A-3': '유재석', 'B-100': '김태호'}
cabinet["A-3"] = "김종국" # key 에 해당하는 값이 있는 경우 업데이트
cabinet["C-20"] = "조세호" # key 에 해당하는 값이 없는 경우 신규 추가
print(cabinet) # {'A-3': '김종국', 'B-100': '김태호', 'C-20': '조세호'}
  ㄴ리스트에 인덱스넘버로 값 추가하는 것처럼 하면 됨

사전에서 삭제하기
del 사용, 리스트에 쓰는 pop도 가능
del cabinet["A-3"] # key "A-3" 에 해당하는 데이터 삭제
print(cabinet) # {'B-100': '김태호', 'C-20': '조세호'}

사전 key값만 출력
.keys()
print(cabinet.keys()) # dict_keys(['B-100', 'C-20'])

사전 value값만 출력
.values()
print(cabinet.values()) # dict_values(['김태호', '조세호'])

사전 key와 value 둘 다 보기
items()
print(cabinet.items()) # dict_items([('B-100', '김태호'), ('C-20', '조세호')])
  ㄴ리스트처럼 출력됨

전부 삭제
리스트와 동일
.clear()
cabinet.clear()
print(cabinet) # {}

dic = {}
values = [1,2,3,4,5,6]
for x in values : 
    if x%2 == 0 :
      dic[x] = x**2

values = [1,2,3,4,5,6]
dic = {x:x**2 for x in values if x%2 ==0}

3. 튜플
: 리스트와 유사하나 삭제, 수정 등이 안됨
리스트는 대괄호, 튜플은 괄호()
인덱스넘버도 리스트와 마찬가지로 0부터 센다
a = (1,2,3)
print(a[0]) #1출력

변수값을 받아서 변수들로 튜플을 구성할 수 있음

name = "김종국"
age = 20
hobby = "코딩"
print(name, age, hobby) # 김종국 20 코딩

=>

(name, age, hobby) = ("김종국", 20, "코딩")
print(name, age, hobby) # 김종국 20 코딩

근데 이건 리스트도 마찬가지로 가능



4. 세트
: 집합이라고 생각하면 편함
set([])이나 {}사용, 중복허용 안함 -> 여러번적어도 프로그램이 알아서 중복제거해줌


*함수
교집합 : intersection()

java = {"유재석", "김태호", "양세형"} # 자바 개발자 집합
python = set(["유재석", "박명수"]) # 파이썬 개발자 집합
print(java & python) # {'유재석'}
print(java.intersection(python)) # {'유재석'}

합집합 : | 이나 union()
print(java | python) # {'박명수', '유재석', '김태호', '양세형'}
print(java.union(python)) # {'박명수', '유재석', '김태호', '양세형'}
-> 단, 합치는 순서가 python|java면 양세형, 박명수, 유재석 ...이렇게 순서가 바뀜 (순서보정은 되지 않음!)

차집합 : -이나 difference()
-자바에는 있는데 파이썬엔 없는 사람
print(java - python) # {'양세형', '김태호'}
print(java.difference(python)) # {'양세형', '김태호'}

세트추가 : add()
python.add("김태호")
print(python) # {'박명수', '유재석', '김태호'}

세트삭제 : remove()
java.remove("김태호")
print(java) # {'유재석', '양세형'}



5. 자료구조 변경
: 리스트, 튜플, 세트, 딕셔너리 등 자료구조의 형태를 다른 것으로 변환할 수 있다

*어떤 자료구조인지 알아보기
자료형과 마찬가지로 type()을 쓰면 됨

*자료구조 바꾸기
자료형과 마찬가지로 캐스트형태 쓰면됨 
a = {1,3,5,7}
list(a) -> a는 세트에서 리스트로 변경됨




















