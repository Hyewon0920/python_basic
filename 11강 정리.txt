<모듈>
: 자주사용하는 파이썬 문장들을 모아서 만든 것

1. 사용방법
-import
import theater_module # theater_module 을 가져다가 사용
theater_module.price(3) # 3명이 영화 보러 갔을 때 가격

단, 모듈의 이름이 길면 import 모듈이름 as 내가 사용할 이름 으로 rename할 수 있음

from 모듈이름 import *
-> *은 모듈에 있는 모든기능을 다 쓰겠다는 뜻
-> 원하는 기능이 있다면 *대신 원하는 기능을 써도 되고 콤마로 구분함
-> 원하는 기능도 as 이름으로 rename할 수 있다.


2. 직접 실행
모듈이 올바르게 실행하는지 확인해야할 때가 온다
if __name__ == "__main__" : 직접실행
else : 외부에서 호출
if else문으로 검증함



<패키지>
: 여러모듈을 모아놓은 것 
.py -> 파이썬 파일(모듈을 만들때 이 확장자)
패키지는 폴더를 만들고 그 안에 이런 .py들을 모아놓음
이렇게 하면 import로 패키지, 그 안에 있는 모듈을 가져올 수 있다
하지만 클래스나 함수는 import불가
단, from ~~ import하면 클래스 가져올 수 있음


1. all
패키지를 만들 때 공개할 모듈에 붙임
__all__ (init처럼 앞뒤로 언더바 두개씩 붙여줌)
__all__ = ["vietnam"] # vietnam 모듈 공개


2. 경로확인
import inspect
import random
print(inspect.getfile(random)) # random 모듈의 위치
getfile(모듈이름) 으로 모듈의 위치 확인 가능
-> C:\Python38\lib\random.py 식으로 출력됨

외부에서 호출한 경우 이를 알려주는 경고와 함께 C:\~~~내용이 나타남

패키지 폴더 우클릭 reveal in file explorer클릭
-> 패키지폴더 복사 후 다른 모듈이 있는 패키지에 붙여넣기
-> 이러면 경로를 변경할 수 있음

3. pip
pypi.org 라는 사이트에 유용한 패키지가 모여있음
사이트 Topic부분에서 주제별(email, database, game...)로 프로젝트 존재
Search Projects로 서치도 가능
웹스크래핑에 유용 : beautifulsoup
pip install beautifulsoup4옆에 파일아이콘 -> 복사버튼임
이를 터미널에 붙여넣기하면 설치가 진행됨

*명령어
pip install [패키지명]  -> 패키지 설치
pip install --upgrade [패키지명]  -> 패키지 업그레이드
pip uninstall [패키지명]  -> 패키지 삭제	
pip list  -> 설치 패키지 목록
pip show [패키지명]  -> 패키지 상세 정보



<내장함수>
별도로 import를 사용하지 않아도 내장되어있는 함수
Ex. input()

*dir()
어떤 객체를 넘겼을 때 그 객체가 어떤 변수와 함수를 가지고 있는지 알려주는 목적으로 사용
전달값이 없다면 현재 소스코드 범위 내에서 사용 가능한 모듈, 객체가 출력

print(dir())
import random # random 모듈 가져다 쓰기
print(dir())
import pickle # pickle 모듈 가져다 쓰기
print(dir())

하면 random과 pickle 전 print(dir())을 하면 기본값들만 출력됨
그 이후 random을 import했을 때는 random모듈이 출력

['__annotations__', '__builtins__', '__cached__', 
'__doc__', '__file__', '__loader__', '__name__', 
'__package__', '__spec__']
['__annotations__', '__builtins__', '__cached__', 
'__doc__', '__file__', '__loader__', '__name__', 
'__package__', '__spec__', 'random']
->[][]두개를 비교해보면 마지막에 'random'이 추가되었음을 알 수 있음

이게 왜 유용하냐면 리스트, 튜플 등을 사용하고 이 자료구조를 위해 어떤 함수를 쓸 수 있는지 리스트를 뽑아볼 수 있음
lst = [1, 2, 3]
print(dir(lst))
하면 append, clear등이 포함된 기본함수들의 리스트가 터미널에 출력됨

내장함수가 더 궁금하다면 "list of python builtins" 로 검색을 하면 나오는 파이썬 공식 홈페이지의 Built-in Functions 페이지에 방문하여 확인할 수 있음


<외장함수>
import가 필수임
내장함수를 알아보는 방법과 동일하게 "list of python builtins" 로 검색
Python Module Index 페이지를 방문
원하는 모듈 클릭 -> 상단에 다운로드 링크 존재

*glob
어떤 경로 내의 폴더 또는 파일의 목록을 조회할 때 사용(dir()과 유사)
import glob
print(glob.glob("*.py")) # 확장자가 py 인 모든 파일
-> 
['helloworld.py', 'practice.py', 'theater_module.py'] 출력


*os
운영체제에서 제공하는 기본 기능을 제공
Ex. 폴더 생성 및 삭제
import os
print(os.getcwd()) # current working directory 현재 디렉토리
-> 
C:\Users\Nadocoding\Desktop\PythonWorkspace 출력

-os.path.exists(파일명)
폴더, 파일이 존재하는지 여부를 알려줌

-os.rmdir(파일명)
파일을 삭제함

-os.listdir()
glob()와 비슷하게 cwd내의 파일목록을 출력함


*time
-time.localtime()
[time.struct_time(tm_year=2021, tm_mon=3, tm_mday=1, 
tm_hour=22, tm_min=46, tm_sec=4, tm_wday=0, tm_yday=60, 
tm_isdst=0)]

%Y	년 (year)
%m	월 (month)
%d	일 (day)
%H	시 (hour)
%M	분 (minute)
%S	초 (second)

-time.strftime()
import time
print(time.strftime("%Y-%m-%d %H:%M:%S")) # 연-월-일 시:분:초
->
2021-10-01 22:00:00 출력


*datetime
import datetime
print("오늘 날짜는", datetime.date.today())
->
 2021-10-01 출력

-datetime.timedelta(days = ???)
import datetime
today = datetime.date.today() # 오늘 날짜 저장
td = datetime.timedelta(days=100) # 100일 저장
print("우리가 만난지 100일은", today + td) # 오늘부터 100일 후




























































