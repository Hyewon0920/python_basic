<함수>
: 특정 동작을 반복하고 싶을 때
1. def 함수이름():
     실행 명령문1
     실행 명령문2
    
->이 함수를 실행하고 싶다면 함수이름() 을 적어주면 함수가 호출됨
->()안에는 변수를 선언할 수 있음 함수이름(변수1, 변수2...)

함수는 print도 쓸 수 있지만 값을 반환할 때 return을 쓰기도 한다. 
return을 하고 나면 함수를 탈출하게 됨!

def withdraw(balance, money): # 출금
    if balance >= money: # 잔액이 출금보다 많으면
        print("출금이 완료되었습니다. 잔액은 {0} 원입니다.".format(balance - money))
        return balance - money # 출금 후 잔액 반환
    else:
        print("출금이 완료되지 않았습니다. 잔액은 {0} 원입니다.".format(balance))
        return balance # 기존 잔액 반환
        
balance = 0 # 최초 잔액
balance = deposit(balance, 1000) # 1000원 입금

# 출금 시도
balance = withdraw(balance, 2000) # 2000원 출금 시도 시 잔액이 부족하므로 실패
balance = withdraw(balance, 500) # 500원 출금 시도 시 성공
print(balance) # 현재 잔액

-> 함수의 변수는 기본값을 가질 수 있다 
 def 함수이름(변수1, 변수 2 = 디폴트값) :
     실행문장
이렇게 ()안에 디폴트값을 써주기! 이러면
함수이름(변수_1) 만하고 변수2에 대한 값을 넣지 않더라도 디폴트값이 알아서 들어감
오류 안남~!



*키워드 인자
함수이름(변수1, 변수2, 변수3) 으로 정해두었으나 출력할 때 변수들의 순서를 바꾸고 싶을 때
함수이름(변수2=~~, 변수1=~~, 변수3=~~) <<이렇게 호출하면 출력할 때 변수2, 변수1, 변수3 순으로 출력됨
  ㄴ 단, 일반인자와 키워드 인자를 섞어 쓸 거라면 일반 전달값 먼저, 키워드인자값은 나중에!
profile("유재석", age=20, main_lang="파이썬") # (O) 올바른 함수 호출 방법 (일반 전달값을 먼저 작성)
profile(name="김태호", 25, "파이썬") # (X) 잘못된 함수 호출 방법 (키워드 인자 먼저 작성 후 일반 전달값 작성)



*가변 인자
: 변하는 인자
가변인자는 앞에 *를 붙여주면 된다


def profile(name, age, *language): # 언어 정보를 전달하고 싶은 갯수 만큼 전달 가능    
    print("이름 : {0}\t나이 : {1}\t".format(name, age), end=" ")
for lang in language:
        print(lang, end=" ") # 언어들을 모두 한 줄에 표시
     # 줄바꿈 목적
     
profile("정혜원", 20, "c","python","java")
profile("jake", 30,"c","c#")



*지역변수와 전역변수
: 전역은 함수 밖에서 정의, 함수 밖에서도 쓸 수 있고 지역변수는 함수 안에서만 쓸 수 있다
그러나 만약 지역변수를 전역변수처럼 쓰고 싶다면 지역변수 앞에 global을 붙이면 됨














